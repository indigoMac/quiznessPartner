# Load environment variables from .env
dotenv

# Load aliases
source_env .aliases.sh

# Database queries
alias qdb="docker compose exec db psql -U postgres quizness"
alias qdbtest="docker compose exec db psql -U postgres quizness_test"
alias qusers="docker compose exec db psql -U postgres quizness -c 'SELECT * FROM users;'"
alias qquizzes="docker compose exec db psql -U postgres quizness -c 'SELECT * FROM quizzes;'"
alias qquestions="docker compose exec db psql -U postgres quizness -c 'SELECT * FROM questions;'"

# Development commands
alias qup="docker compose up -d"        # Start all services
alias qdown="docker compose down"       # Stop all services
alias qrestart="docker compose down && docker compose up -d"  # Restart all services
alias qlogs="docker compose logs -f"    # Follow all logs
alias qbacklogs="docker compose logs -f backend"  # Follow backend logs
alias qfrontlogs="docker compose logs -f frontend" # Follow frontend logs

# Database queries
alias qcount="docker compose exec db psql -U postgres quizness -c 'SELECT 
  (SELECT COUNT(*) FROM users) as users_count,
  (SELECT COUNT(*) FROM quizzes) as quizzes_count,
  (SELECT COUNT(*) FROM questions) as questions_count;'"

# Testing - Enhanced
alias qtest="backend/scripts/test_local.sh"                    # Run all tests
alias qtestunit="backend/scripts/test_local.sh --type unit"    # Run unit tests only
alias qtestint="backend/scripts/test_local.sh --type integration" # Run integration tests
alias qtestperf="backend/scripts/test_local.sh --type performance" # Run performance tests
alias qtestapi="backend/scripts/test_local.sh --type api"      # Run API tests
alias qtestauth="backend/scripts/test_local.sh --type auth"    # Run auth tests
alias qtestfull="backend/scripts/test_local.sh --type full"    # Run ALL tests including slow ones
alias qtestfast="backend/scripts/test_local.sh --parallel"     # Run tests in parallel
alias qtestcov="backend/scripts/test_local.sh && open backend/htmlcov/index.html" # Run tests and open coverage

# Load Testing
alias qload="backend/scripts/load_test.sh"                     # Basic load test
alias qloadfast="backend/scripts/load_test.sh --headless -u 20 -r 4 -t 2m" # Quick load test
alias qloadheavy="backend/scripts/load_test.sh --headless -u 100 -r 10 -t 5m" # Heavy load test

# Testing with Docker
alias qtestdocker="docker-compose -f docker-compose.test.yml up --build backend-test" # Run tests in Docker
alias qloaddocker="docker-compose -f docker-compose.test.yml up locust-test" # Load test in Docker

# Database for testing
alias qtestdb="docker-compose -f docker-compose.test.yml up -d db-test" # Start test database
alias qtestdbdown="docker-compose -f docker-compose.test.yml down"     # Stop test environment

# Coverage and reporting
alias qcoverage="cd backend && python -m pytest tests/ --cov=. --cov-report=html && open htmlcov/index.html"

# Code quality
alias qformat="cd backend && black . && isort ."               # Format code
alias qlint="cd backend && flake8 . && black --check . && isort --check ." # Check code quality

# Useful development queries
alias qlatest="docker compose exec db psql -U postgres quizness -c 'SELECT id, title, created_at FROM quizzes ORDER BY created_at DESC LIMIT 5;'"

# Interactive console with expanded display
alias qconsole="docker compose exec db psql -U postgres -x quizness"

# Status check - Enhanced
alias qstatus="echo 'ðŸš€ QuizNess Status:' && docker compose ps && echo '\nðŸ“Š Database counts:' && qcount && echo '\nðŸ§ª Test environment:' && docker-compose -f docker-compose.test.yml ps"

# Quick development setup
alias qdev="qup && echo 'âœ… Services started' && echo 'ðŸ§ª Run qtest to test' && echo 'ðŸ“Š Run qstatus to check status'"

echo "QuizApp development aliases loaded! ðŸš€"
echo "New testing commands:"
echo "  qtest        - Run all tests"
echo "  qtestunit    - Run unit tests"
echo "  qtestint     - Run integration tests"
echo "  qload        - Run load tests"
echo "  qcoverage    - Generate coverage report"
echo "Type 'qstatus' to see current status" 